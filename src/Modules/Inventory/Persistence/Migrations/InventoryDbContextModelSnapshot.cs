// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Modules.Inventory.Persistence;

#nullable disable

namespace Modules.Inventory.Persistence.Migrations
{
    [DbContext(typeof(InventoryDbContext))]
    partial class InventoryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Inventory")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Modules.Inventory.Domain.Entities.Snack", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("SnackLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SnackTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Label")
                        .IsUnique();

                    b.HasIndex("SnackLocationId");

                    b.HasIndex("SnackTypeId");

                    b.ToTable("Snack", "Inventory", t =>
                        {
                            t.HasCheckConstraint("CK_Snack_Cost", "Cost > 0");

                            t.HasCheckConstraint("CK_Snack_Price", "Price > 0");
                        });
                });

            modelBuilder.Entity("Modules.Inventory.Domain.Entities.SnackLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("SnackLocation", "Inventory");
                });

            modelBuilder.Entity("Modules.Inventory.Domain.Entities.SnackType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SnackType", "Inventory");
                });

            modelBuilder.Entity("Modules.Inventory.Domain.Entities.Snack", b =>
                {
                    b.HasOne("Modules.Inventory.Domain.Entities.SnackLocation", "SnackLocation")
                        .WithMany("Snacks")
                        .HasForeignKey("SnackLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Modules.Inventory.Domain.Entities.SnackType", "SnackType")
                        .WithMany("Snacks")
                        .HasForeignKey("SnackTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SnackLocation");

                    b.Navigation("SnackType");
                });

            modelBuilder.Entity("Modules.Inventory.Domain.Entities.SnackLocation", b =>
                {
                    b.Navigation("Snacks");
                });

            modelBuilder.Entity("Modules.Inventory.Domain.Entities.SnackType", b =>
                {
                    b.Navigation("Snacks");
                });
#pragma warning restore 612, 618
        }
    }
}
